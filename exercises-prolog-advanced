%GRAPH

%fromList(List, Graph)
%test Yes: fromList([10,20,30],[e(10,20),e(20,30)]).

%fromCircList(List, Graph)
%test: Yes: fromCircList([10,20,30],[e(10,20),e(20,30),e(30,10)]).

% dropNode(+Graph, +Node, -OutGraph); drop all edges starting and leaving from a Node
%test dropNode([e(1,2),e(1,3),e(2,3)],1,[e(2,3)]).

% reaching(+Graph, +Node, -List)% all the nodes that can be reached in 1 step from Node possibly use findall, looking for e(Node,_) combined with member(?Elem,?List)
% test:reaching([e(1,2),e(1,3),e(2,3)],1,L). -> L/[2,3].

% anypath(+Graph, +Node1, +Node2, -ListPath) a path from Node1 to Node2 if there are many path, they are showed 1-by-1
%test: anypath([e(1,2),e(1,3),e(2,3)],1,3,L). %output: â€“ L/[e(1,2),e(2,3)] e L/[e(1,3)]

% allreaching(+Graph, +Node, -List)  all the nodes that can be reached from Node. Suppose the graph is NOT circular!. Use findall and anyPath!
% test: allreaching([e(1,2),e(2,3),e(3,5)],1,[2,3,5]).
